Index: app/src/main/java/com/example/water_app/main/HomeFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.water_app.main\r\n\r\nimport android.content.Context\r\nimport android.graphics.Rect\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.core.os.bundleOf\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.setFragmentResult\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport androidx.viewpager2.widget.ViewPager2\r\nimport com.example.water_app.donation.CategoryFragment\r\nimport com.example.water_app.R\r\nimport com.example.water_app.databinding.FragmentHomeBinding\r\nimport com.example.water_app.recyclerview.DonationAdapter\r\nimport com.example.water_app.recyclerview.ViewPagerAdapter\r\nimport com.example.water_app.repository.Repository\r\nimport com.example.water_app.viewmodel.MainViewModel\r\nimport com.example.water_app.viewmodel.MainViewModelFactory\r\nimport kotlinx.android.synthetic.main.fragment_com_history.*\r\nimport kotlinx.android.synthetic.main.fragment_home.*\r\n\r\nclass HomeFragment : Fragment() {\r\n\r\n    // 뷰바인딩\r\n    private lateinit var binding: FragmentHomeBinding\r\n\r\n    // MainActivity 가져오기\r\n    lateinit var mainActivity: MainActivity\r\n\r\n    // 뷰페이저\r\n    private val sliderImageHandler: Handler = Handler()\r\n    private val sliderImageRunnable = Runnable { binding.ivBanner.currentItem = binding.ivBanner.currentItem + 1 }\r\n\r\n    // context를 mainActivity에 담음\r\n    override fun onAttach(context: Context) {\r\n        super.onAttach(context)\r\n\r\n        mainActivity = context as MainActivity\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n\r\n        // 뷰바인딩\r\n        binding = FragmentHomeBinding.inflate(inflater, container, false)\r\n\r\n        // 뷰페이저\r\n        val imageList = arrayListOf<Int>().apply {\r\n            for (i in 0..2) {\r\n                add(R.drawable.banner1)\r\n                add(R.drawable.banner2)\r\n                add(R.drawable.banner3)\r\n            }\r\n        }\r\n\r\n        val pageMarginPx = resources.getDimensionPixelOffset(R.dimen.pageMargin)\r\n        val pagerWidth = resources.getDimensionPixelOffset(R.dimen.pageWidth)\r\n        val screenWidth = resources.displayMetrics.widthPixels\r\n        val offsetPx = screenWidth - pageMarginPx - pagerWidth\r\n\r\n        binding.ivBanner.apply {\r\n            adapter = ViewPagerAdapter(imageList, binding.ivBanner)\r\n            offscreenPageLimit = 1\r\n            getChildAt(0).overScrollMode = RecyclerView.OVER_SCROLL_NEVER\r\n            registerOnPageChangeCallback(object : ViewPager2.OnPageChangeCallback() {\r\n                override fun onPageSelected(position: Int) {\r\n                    super.onPageSelected(position)\r\n                    sliderImageHandler.removeCallbacks(sliderImageRunnable)\r\n                    sliderImageHandler.postDelayed(sliderImageRunnable, 3000)\r\n                }\r\n            })\r\n            setPageTransformer { page, position ->\r\n                page.translationX = position * -offsetPx\r\n            }\r\n        }\r\n\r\n        // MainActivity 담음\r\n        mainActivity = context as MainActivity\r\n\r\n        // 리사이클러뷰\r\n        home()\r\n        homeEnd()\r\n\r\n        // 카테고리\r\n        binding.btnChild.setOnClickListener{\r\n            val result = 0\r\n            setFragmentResult(\"requestKey\", bundleOf(\"bundleKey\" to result))\r\n            parentFragmentManager.beginTransaction()\r\n                .replace(R.id.flContainer, CategoryFragment())\r\n                .commit()\r\n        }\r\n        binding.btnOld.setOnClickListener{\r\n            val result = 1\r\n            setFragmentResult(\"requestKey\", bundleOf(\"bundleKey\" to result))\r\n            parentFragmentManager.beginTransaction()\r\n                .replace(R.id.flContainer, CategoryFragment())\r\n                .commit()\r\n        }\r\n        binding.btnDisabled.setOnClickListener{\r\n            val result = 2\r\n            setFragmentResult(\"requestKey\", bundleOf(\"bundleKey\" to result))\r\n            parentFragmentManager.beginTransaction()\r\n                .replace(R.id.flContainer, CategoryFragment())\r\n                .commit()\r\n        }\r\n        binding.btnAnimal.setOnClickListener{\r\n            val result = 3\r\n            setFragmentResult(\"requestKey\", bundleOf(\"bundleKey\" to result))\r\n            parentFragmentManager.beginTransaction()\r\n                .replace(R.id.flContainer, CategoryFragment())\r\n                .commit()\r\n        }\r\n        binding.btnEtc.setOnClickListener{\r\n            val result = 4\r\n            setFragmentResult(\"requestKey\", bundleOf(\"bundleKey\" to result))\r\n            parentFragmentManager.beginTransaction()\r\n                .replace(R.id.flContainer, CategoryFragment())\r\n                .commit()\r\n        }\r\n        return binding.root\r\n    }\r\n\r\n    // 리사이클러뷰 진행중인 기부\r\n    fun home(){\r\n        // 뷰 모델 가져오기\r\n        val viewModel : MainViewModel\r\n\r\n        val repository = Repository()\r\n        val viewModelFactory = MainViewModelFactory(repository)\r\n\r\n        viewModel = ViewModelProvider(this,viewModelFactory).get(MainViewModel::class.java)\r\n        viewModel.getDonationList()\r\n        viewModel.getDonationListResponse.observe(viewLifecycleOwner, Observer {\r\n            // 통신 성공\r\n            if(it.isSuccessful){\r\n                val homelist = it.body()\r\n\r\n                // 리사이클러뷰\r\n                binding.rvDonation.layoutManager = LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)\r\n                binding.rvDonation.setHasFixedSize(true)\r\n                binding.rvDonation.adapter = DonationAdapter(requireContext(), homelist)\r\n\r\n                rvDonation.addItemDecoration(RecyclerViewDecoration(25))\r\n\r\n                // OnClickListener\r\n                val adapter = DonationAdapter(requireContext(), homelist)\r\n\r\n                adapter.setItemClickListener(object : DonationAdapter.OnItemClickListener{\r\n                    override fun onClick(v: View, position: Int) {\r\n                        activity?.let{\r\n                        }\r\n                    }\r\n                })\r\n                binding.rvDonation.adapter = adapter\r\n            }\r\n        })\r\n    }\r\n\r\n    // 완료된 기부\r\n    fun homeEnd(){\r\n        val viewModel : MainViewModel\r\n        // php데이터담은\r\n        // 리사이클러뷰 표현 아직 사진 퍼센트 없음\r\n        val repository = Repository()\r\n        val viewModelFactory = MainViewModelFactory(repository)\r\n\r\n        viewModel = ViewModelProvider(this,viewModelFactory).get(MainViewModel::class.java)\r\n        viewModel.getHomeEnd()\r\n        viewModel.getHomeEndListResponse.observe(viewLifecycleOwner, Observer {\r\n            // 통신 성공\r\n            if(it.isSuccessful){\r\n                val closelist = it.body()\r\n\r\n                // 리사이클러뷰\r\n                binding.rvClose.layoutManager = LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)\r\n                binding.rvClose.setHasFixedSize(true)\r\n                binding.rvClose.adapter = DonationAdapter(requireContext(), closelist)\r\n\r\n                rvClose.addItemDecoration(RecyclerViewDecoration(25))\r\n\r\n                // OnClickListener\r\n                val adapter = DonationAdapter(requireContext(), closelist)\r\n\r\n                adapter.setItemClickListener(object : DonationAdapter.OnItemClickListener{\r\n                    override fun onClick(v: View, position: Int) {\r\n                        activity?.let{\r\n                        }\r\n                    }\r\n                })\r\n                binding.rvClose.adapter = adapter\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    // 뷰페이저\r\n    override fun onResume() {\r\n        super.onResume()\r\n        sliderImageHandler.postDelayed(sliderImageRunnable, 1000)\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        sliderImageHandler.removeCallbacks(sliderImageRunnable)\r\n    }\r\n\r\n    // 가로 간격\r\n    class RecyclerViewDecoration(private val divWidth: Int) : RecyclerView.ItemDecoration() {\r\n        override fun getItemOffsets(\r\n            outRect: Rect,\r\n            view: View,\r\n            parent: RecyclerView,\r\n            state: RecyclerView.State\r\n        ) {\r\n            super.getItemOffsets(outRect, view, parent, state)\r\n            outRect.right = divWidth\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/water_app/main/HomeFragment.kt b/app/src/main/java/com/example/water_app/main/HomeFragment.kt
--- a/app/src/main/java/com/example/water_app/main/HomeFragment.kt	(revision 764bb898e35b7a2bdabd1a04d8cda0b1ef724060)
+++ b/app/src/main/java/com/example/water_app/main/HomeFragment.kt	(date 1673836244763)
@@ -149,7 +149,7 @@
                 binding.rvDonation.setHasFixedSize(true)
                 binding.rvDonation.adapter = DonationAdapter(requireContext(), homelist)
 
-                rvDonation.addItemDecoration(RecyclerViewDecoration(25))
+                binding.rvDonation.addItemDecoration(RecyclerViewDecoration(25))
 
                 // OnClickListener
                 val adapter = DonationAdapter(requireContext(), homelist)
@@ -185,7 +185,7 @@
                 binding.rvClose.setHasFixedSize(true)
                 binding.rvClose.adapter = DonationAdapter(requireContext(), closelist)
 
-                rvClose.addItemDecoration(RecyclerViewDecoration(25))
+                binding.rvClose.addItemDecoration(RecyclerViewDecoration(25))
 
                 // OnClickListener
                 val adapter = DonationAdapter(requireContext(), closelist)
Index: app/src/main/java/com/example/water_app/main/DonationFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.water_app.main\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.graphics.Rect\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.activity.OnBackPressedCallback\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.recyclerview.widget.GridLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport androidx.recyclerview.widget.RecyclerView.ItemDecoration\r\nimport com.example.water_app.donation.CommunicationActivity\r\nimport com.example.water_app.databinding.ActivityRecyclerviewBinding\r\nimport com.example.water_app.recyclerview.DonationAdapter\r\nimport com.example.water_app.repository.Repository\r\nimport com.example.water_app.user.MySharedPreferences\r\nimport com.example.water_app.viewmodel.MainViewModel\r\nimport com.example.water_app.viewmodel.MainViewModelFactory\r\nimport kotlinx.android.synthetic.main.fragment_com_history.*\r\n\r\n\r\nclass DonationFragment : Fragment() {\r\n\r\n    // 뷰바인딩\r\n    private lateinit var binding: ActivityRecyclerviewBinding\r\n\r\n    // 뷰 모델 가져오기\r\n    private lateinit var viewModel : MainViewModel\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n\r\n        // 뷰바인딩\r\n        binding = ActivityRecyclerviewBinding.inflate(inflater, container, false)\r\n\r\n        val repository = Repository()\r\n        val viewModelFactory = MainViewModelFactory(repository)\r\n\r\n        val mbr_sn = MySharedPreferences.getUserSn(requireContext()).toInt()\r\n\r\n        viewModel = ViewModelProvider(this,viewModelFactory).get(MainViewModel::class.java)\r\n        viewModel.getMy(mbr_sn)\r\n        viewModel.getMyResponse.observe(viewLifecycleOwner, Observer {\r\n            // 통신 성공\r\n            if(it.isSuccessful){\r\n                val donationList = it.body()\r\n\r\n                //리사이클러뷰\r\n                binding.recyclerView.layoutManager = GridLayoutManager(requireContext(), 2)\r\n                binding.recyclerView.setHasFixedSize(true)\r\n                binding.recyclerView.adapter = DonationAdapter(requireContext(), donationList)\r\n\r\n                // 아이템 간 간격\r\n                recyclerView.addItemDecoration(RecyclerViewDecoration1(50))\r\n                recyclerView.addItemDecoration(RecyclerViewDecoration2(50))\r\n\r\n                // OnClickListener\r\n                val adapter = DonationAdapter(requireContext(), donationList)\r\n\r\n                adapter.setItemClickListener(object : DonationAdapter.OnItemClickListener{\r\n                    override fun onClick(v: View, position: Int) {\r\n                        activity?.let{\r\n                            val intent = Intent(context, CommunicationActivity::class.java)\r\n                            startActivity(intent)\r\n                        }\r\n                    }\r\n                })\r\n                binding.recyclerView.adapter = adapter\r\n            }\r\n        })\r\n        return binding.root\r\n    }\r\n\r\n    // 뒤로가기 메인 고정\r\n    private lateinit var callback: OnBackPressedCallback\r\n    lateinit var mainActivity: MainActivity\r\n\r\n    // 뒤로가기 고정\r\n    override fun onAttach(context: Context) {\r\n        super.onAttach(context)\r\n        callback = object : OnBackPressedCallback(true) {\r\n            override fun handleOnBackPressed() {\r\n            }\r\n        }\r\n        requireActivity().onBackPressedDispatcher.addCallback(this, callback)\r\n\r\n        mainActivity = context as MainActivity\r\n    }\r\n\r\n    // 뒤로가기 고정\r\n    override fun onDetach() {\r\n        super.onDetach()\r\n        callback.remove()\r\n    }\r\n\r\n    // 가로 간격\r\n    class RecyclerViewDecoration1(private val divWidth: Int) : ItemDecoration() {\r\n        override fun getItemOffsets(\r\n            outRect: Rect,\r\n            view: View,\r\n            parent: RecyclerView,\r\n            state: RecyclerView.State\r\n        ) {\r\n            super.getItemOffsets(outRect, view, parent, state)\r\n            outRect.left = divWidth\r\n        }\r\n    }\r\n\r\n    // 세로 간격\r\n    class RecyclerViewDecoration2(private val divHeight: Int) : ItemDecoration() {\r\n        override fun getItemOffsets(\r\n            outRect: Rect,\r\n            view: View,\r\n            parent: RecyclerView,\r\n            state: RecyclerView.State\r\n        ) {\r\n            super.getItemOffsets(outRect, view, parent, state)\r\n            outRect.bottom = divHeight\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/water_app/main/DonationFragment.kt b/app/src/main/java/com/example/water_app/main/DonationFragment.kt
--- a/app/src/main/java/com/example/water_app/main/DonationFragment.kt	(revision 764bb898e35b7a2bdabd1a04d8cda0b1ef724060)
+++ b/app/src/main/java/com/example/water_app/main/DonationFragment.kt	(date 1673836244769)
@@ -58,8 +58,8 @@
                 binding.recyclerView.adapter = DonationAdapter(requireContext(), donationList)
 
                 // 아이템 간 간격
-                recyclerView.addItemDecoration(RecyclerViewDecoration1(50))
-                recyclerView.addItemDecoration(RecyclerViewDecoration2(50))
+                binding.recyclerView.addItemDecoration(RecyclerViewDecoration1(40, 10))
+                binding.recyclerView.addItemDecoration(RecyclerViewDecoration2(50))
 
                 // OnClickListener
                 val adapter = DonationAdapter(requireContext(), donationList)
@@ -101,7 +101,7 @@
     }
 
     // 가로 간격
-    class RecyclerViewDecoration1(private val divWidth: Int) : ItemDecoration() {
+    class RecyclerViewDecoration1(private val divWidth: Int, private val divHeight: Int) : ItemDecoration() {
         override fun getItemOffsets(
             outRect: Rect,
             view: View,
@@ -110,6 +110,7 @@
         ) {
             super.getItemOffsets(outRect, view, parent, state)
             outRect.left = divWidth
+            outRect.right = divHeight
         }
     }
 
